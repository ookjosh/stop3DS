[
{
	"uri": "https://ookjosh.github.io/stop3DS/discussions/",
	"title": "Discussions",
	"tags": [],
	"description": "",
	"content": "A collection of comments and musings on problems and decisions during the development process.\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/",
	"title": "Feature Tracking",
	"tags": [],
	"description": "",
	"content": "Herein lie ongoing details of the development of stop3DS\u0026rsquo; features.\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/snippets/",
	"title": "Snippets",
	"tags": [],
	"description": "",
	"content": "Any discussions pertaining to specific code live here.\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": " Screenshots from development "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Stop3DS Docs\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Stop3DS Stop3DS is a project started to give me the opportunity to mess around with a lot of things I find interesting: programming (with different paradigms), embedded/resource constrained targets, and human/machine interaction. By targetting the 3DS console as a homebrew application I limited myself to as little external help as possible outside of the homebrew toolchain provided. This project is meant to be a learning experience and highlights my struggles as much as any success. Take a look around for posts discussing my goals, approaches, and lessons learned. The code is available so please take a look if you are interested.\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/about/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Stop3DS is a small homebrew animation application developed for the 3DS console. It was created as an exercise in design and coding and is in active development.\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/discussions/advancedfeatures/",
	"title": "Advanced Features",
	"tags": [],
	"description": "",
	"content": " Overview There are many features I would consider \u0026ldquo;advanced\u0026rdquo; in that they go beyond a simple frame-by-frame drawing and animation app. These features include things such as \u0026ldquo;sprite\u0026rdquo; support, assets that can be manipulated and treated as objects (moved, transformed) without having to manually redraw everything. More interestingly this can lead to \u0026ldquo;smart animation\u0026rdquo; or sprites that react inputs from the user such as a fish reacting to food as seen in Bret Victor\u0026rsquo;s video \u0026ldquo;Stop drawing dead fish\u0026rdquo;. Taking this drawing application and allowing it to go beyond human input in small ways like this is an interesting potential path.\nProgress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/gallery/",
	"title": "Animation Gallery",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/discussions/applicationstate/",
	"title": "Application State",
	"tags": [],
	"description": "",
	"content": " Overview Handling application state is an important and well discussed topic. Now I get to see what works well for this application.\nStop3DS\u0026rsquo; State What does this application have to track on a high level? Things such as current animation, current scene, current frame all seem like fair game. But why should knowledge of the current frame be anywhere outside of the Animation construct? Why should it be outside of the current Scene construct? To explore these questions let\u0026rsquo;s break down the application.\nTop level Application Loop User Input Rendering Animation state\nThe application loop and associated bits are what I would consider the \u0026ldquo;top level\u0026rdquo; of state hierarchy. Everything else depends on the loop existing in the first place and any data being passed through it.\nUser input presents an interesting problem because it is important to abstract specific keycodes and such from absolute events. Keeping things generic and flexible will help keep the code portable but also much more maintainable.\nRendering the still frames is also an interesting case when it comes to state because there are many ways that it is best to keep the rendering itself stateless and just have it functionally act on incoming data.\nAnimation state is an important one to figure out because that is a large part of how the user input is going to interact with the application - starting/stopping, creating new frames/scenes/etc, touch input. Having a good plan for how this will be handled will help keep everything else in check and simpler to design.\nI think it\u0026rsquo;s important to distinguish between \u0026ldquo;Rendering\u0026rdquo; a frame and the user editing a frame. I believe both should take on a functional aspect (in order to easily support undo/redo, etc) and also to consolidate data and associated state. The rendering process has no need to handle user input, but editing frames certainly does.\nUser input I wonder if I could use a registration type setup for handling inputs. Each button would have a way to pass a function that is called whenever it is pressed for instance. This is used in many other cases (like .onClick) and would offer a way to dynamically alter a button\u0026rsquo;s function without having a mess of state handling inside each button\u0026rsquo;s code. This would make contextual UI much simpler and something I could explore.\nThe question with this is if I can keep state from leaking from other places. I don\u0026rsquo;t want the input code to somehow become tied to the state of the current frame or something like that, but I think as long as I design the interface correctly the chance of that is much less than some alternatives.\nIn pseudo code, maybe something akin to this may be useful:\n// Some accessible thing... where does this live? InputManager inputman; function doThingOne/Two/Three exist in local scope. int foo = 10; // also exists here // I need to read up on closures/scoping/lifetimes to appropriately // alter local state and keep it contained. inputman.registerButtonA(function(InputEvent event) { switch(event) { case BUTTON_DOWN: doThingOne(); // Will this work like I expect? // (print 11) printf(\u0026quot;My value: %d\\n\u0026quot;, foo+1); case BUTTON_HELD: doThingToThis(passedValue); case BUTTON_RELEASED: doThingThree(); default: } });  Then whenever the application changed to a different mode the UI could be updated simply, eliminating\nif (kDown \u0026amp; BUTTON_A) { switch (currentMode) { case MODE_A: \u0026lt;too much stuff\u0026gt; case MODE_B: \u0026lt;too much stuff\u0026gt; case MODE_C: \u0026lt;too much stuff\u0026gt; case MODE_D: \u0026lt;too much stuff\u0026gt; case MODE_E: \u0026lt;too much stuff\u0026gt; } }  or something akin to that. Being able to drop in arbitrary functions sounds interesting. There is a potential problem if two things try to assign functionality at the same time (or expect their functionality to be active) but that sounds more like a mistake rather than fundamental flaw.\nAnimation State I believe for my first attempt I am going to utilize a method I have used in other projects (notably the robotic platform my company created) wherein there lies a single mutable structure that defines the application\u0026rsquo;s state and everything is derived from that central store. This is also the method used by Endgame in their functionally reactive UI (https://www.endgame.com/blog/technical-blog/how-we-built-our-ui), so given previous success with this method I believe it is appropriate to give it a try here. The key to making this implementation work cleanly and remain maintainable is limiting mutability of the state. In essence, part A should not be able to directly change aspects of part B directly, even if it theoretically has vision of part B\u0026rsquo;s components. It is also important to have things react as a function of the state, rather than have the state be part of the function. For instance, the following pseudo-snippet shows a basic comparison:\n// Cleaner interaction void drawFrame(Frame frm, Destination output) { /* Do my frame drawing routine */ output = frm.source; // basic idea } // Potentially unclear and untestable void drawFrame() { /* Do my frame drawing routine */ // What is currentFrame/output and where did they come from? // This is brittle and tied to the state structure as it exists // when the code was written. output = currentFrame.source; }  In the first example we have context of all of the values being used thanks to the arguments passed, and we have an idea of what is going on when we call the function - drawFrame(currentFrame, bottomScreen) is clear in its meaning over drawFrame(). Where is the frame being drawn in the second function? What frame is it? Having a function like the first eliminates situations where you would otherwise have drawCurrentFrameOnTopScreen() and drawLastFrameOnBottomScreen() or drawCurrentFrameToBuffer().\nThat demonstrates how we can use the central state definition to derive presentation from the state, which is arguably a simpler problem than limiting the mutablility of the central state by different components. As stated above, this is an incredibly important design problem that makes or breaks this setup. So in this case I am going to limit state mutation to user inputs only.\nState mutability This application lives to react to user inputs. It is in many ways a dumb canvas, but even if it partakes in \u0026ldquo;smart\u0026rdquo; behaviors they are always a result of the user requesting them. As such, there should be no change to internal state outside of user input. Everything else that the system needs it should be able to derive from the results of these inputs.\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ookjosh.github.io/stop3DS/discussions/datastructure/",
	"title": "Data Structures",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/drawing/",
	"title": "Drawing",
	"tags": [],
	"description": "",
	"content": " Overview Progress Linear Interpolation As of commit 5405bdc5179bbccd01aca7139425e38cef068cfe I have finally actually implemented a real \u0026lsquo;LERP\u0026rsquo; for user input. And my it makes a huge difference. Before then I had messed around with a very obtuse (intentionally naive we\u0026rsquo;ll say) implementation that was both flawed and bloated. These images compare drawing with the two methods:\n  Old LERP   .\n    Better LERP   .\n  "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/framecompression/",
	"title": "Frame Compression",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/framerate/",
	"title": "Framerate",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/saveloadanimation/",
	"title": "Import/Export",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/onionskin/",
	"title": "Onion Skinning",
	"tags": [],
	"description": "",
	"content": " Overview Onion skinning is really important in creating animations and is fun. It derives from old hand animation techniques which used a transparent sheet to allow the animators to see the previous frame. On computers this is an alpha compositing problem.\nProgress I have a working basic version that displays the previous frame if it exists. Depending on a) if it is necessary and b) if it works well with UX it might be cool to be able to mark an alternate frame as the onion skin.\nLayers Similar to onion skinning (in terms of technical approach) are layers in each frame. We need to be able to composite multiple layers in order to have a foreground/background/onion skin etc.\nIn order to do this in software (which I am doing here - often you can get this in some form of hardware acceleration) you need to only copy pixels that are not \u0026ldquo;transparent\u0026rdquo; for each layer, iterating over your layers from back to front.\n"
},
{
	"uri": "https://ookjosh.github.io/stop3DS/discussions/portablecode/",
	"title": "Portable Code",
	"tags": [],
	"description": "",
	"content": " Overview Throughout the design of this project I am trying (and almost certainly failing) at making the codebase as portable as possible. By that I don\u0026rsquo;t mean that it should be able to target any device known to man, but I do hope that the structure is parsable and easy to follow and maintain.\nProgress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/scrubbing/",
	"title": "Scrubbing",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/assets/",
	"title": "Shared Assets",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ookjosh.github.io/stop3DS/discussions/ui/",
	"title": "UI",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/discussions/ux/",
	"title": "UX",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/undoredo/",
	"title": "Undo/Redo",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
},
{
	"uri": "https://ookjosh.github.io/stop3DS/features/internet/",
	"title": "Web Features",
	"tags": [],
	"description": "",
	"content": " Overview Progress "
}]